# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# app.py - Application module
#
# Python Interface Generator for AlpycaDevice
#
# Author:   Robert B. Denny <rdenny@dc3.com> (rbd)
#
# Python Compatibility: Requires Python 3.7 or later
#
# Tools:
# ruamel.yaml (later pyYAML) https://yaml.readthedocs.io/en/latest/index.html
# munch to provide object (dotted) access to the dict made by pyYAML.
#
# -----------------------------------------------------------------------------
# MIT License
#
# Copyright (c) 2023 Bob Denny
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# -----------------------------------------------------------------------------
# Edit History:
# 19-Jan-2023   rbd Initial edit

import yaml

cls_tmpl = '''@before(PreProcessRequest())
class {mname}'''

mod_hdr = '''
# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# {devname}.py - Alpaca API responders for {devname}
#
# Author:   Your R. Name <your@email.org> (abc)
#
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#
# ??-???-????   abc Initial edit

from falcon import Request, Response, HTTPBadRequest, before
from logging import Logger
from shr import PropertyResponse, MethodResponse, PreProcessRequest, \\
                get_request_field, to_bool
from exceptions import *        # Nothing but exception classes

logger: Logger = None

'''
cls_tmpl = '''@before(PreProcessRequest())
class {mname}:

'''

get_tmpl = '''    def on_get(self, req: Request, resp: Response, devnum: int):
        try:
            # ----------------------
            val = ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, f'{self.__class__.__name__} failed', ex)).json

'''

put_tmpl = '''    def on_put(self, req: Request, resp: Response, devnum: int):
        formdata = req.get_media()
        ##PARAMVAL## = ##PARAMCVT##formdata['##PARAMNAME##'])
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, f'{self.__class__.__name__} failed', ex)).json

'''

def main():
    with open('AlpacaDeviceAPI_v1.yaml') as f:
        toptree = yaml.safe_load(f)

    seendevs = []
    mf = None
    for path, meths in toptree['paths'].items():
        print(f'{path}')
        if(path.startswith('/{device_type}')):
            continue
        bits = path.split('/')
        devname = bits[1]
        if not devname in seendevs:
            if not mf is None and not mf.closed:
                mf.close
            mf = open(f'{devname}.py', 'w')
            mf.write(mod_hdr.replace('{devname}', devname))
            seendevs.append(devname)
        mname = bits[3]
        mf.write(cls_tmpl.replace('{mname}', mname))
        for meth, meta in meths.items():
            if meth == 'get':
                mf.write(get_tmpl)
            else:
                mf.write(put_tmpl)
    mf.close()

    print('end')


# ========================
if __name__ == '__main__':
    main()
# ========================
